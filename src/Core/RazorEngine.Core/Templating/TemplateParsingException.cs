//-----------------------------------------------------------------------------
// <copyright file="TemplateParsingException.cs" company="RazorEngine">
//     Copyright (c) Matthew Abbott. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------------
namespace RazorEngine.Templating
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.Serialization;
    using System.Web.Razor.Parser.SyntaxTree;

    /// <summary>
    /// Defines an exception that occurs during template parsing.
    /// </summary>
    [SuppressMessage("Microsoft.Design", "CA1032:ImplementStandardExceptionConstructors", Justification = "Reviewed. Suppression is OK here."), Serializable]
    public class TemplateParsingException : Exception
    {
        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateParsingException"/> class.
        /// </summary>
        /// <param name="error">The <see cref="RazorError"/> generated by the parser.</param>
        internal TemplateParsingException(RazorError error)
            : base(error.Message)
        {
            this.Column = error.Location.CharacterIndex;
            this.Line = error.Location.LineIndex;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateParsingException"/> class.
        /// </summary>
        /// <param name="info">The serialization info.</param>
        /// <param name="context">The streaming context.</param>
        /// <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
        /// <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        protected TemplateParsingException(SerializationInfo info, StreamingContext context)
            : base(info, context)
        {
            this.Column = info.GetInt32("Column");
            this.Line = info.GetInt32("Line");
        }

        #endregion

        #region Properties

        /// <summary>
        /// Gets the column the parsing error occurred.
        /// </summary>
        public int Column { get; private set; }

        /// <summary>
        /// Gets the line the parsing error occurred.
        /// </summary>
        public int Line { get; private set; }

        #endregion

        #region Methods

        /// <summary>
        /// Gets the object data for serialization.
        /// </summary>
        /// <param name="info">The serialization info.</param>
        /// <param name="context">The streaming context.</param>
        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData(info, context);

            info.AddValue("Column", this.Column);
            info.AddValue("Line", this.Line);
        }

        #endregion
    }
}