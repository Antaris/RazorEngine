<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RazorEngine</name>
    </assembly>
    <members>
        <member name="T:RazorEngine.Compilation.CompilerServiceBase">
            <summary>
            Provides a base implementation of a compiler service.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.ICompilerService">
            <summary>
            Defines the required contract for implementing a compiler service.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.ICompilerService.BuildTypeName(System.Type)">
            <summary>
            Builds a type name for the specified template type.
            </summary>
            <param name="templateType">The template type.</param>
            <returns>The string type name (including namespace).</returns>
        </member>
        <member name="M:RazorEngine.Compilation.ICompilerService.CompileType(RazorEngine.Compilation.TypeContext)">
            <summary>
            Compiles the type defined in the specified type context.
            </summary>
            <param name="context">The type context which defines the type to compile.</param>
            <returns>The compiled type.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.ICompilerService.IncludeAssemblies">
            <summary>
            Returns a set of assemblies that must be referenced by the compiled template.
            </summary>
            <returns>The set of assemblies.</returns>
        </member>
        <member name="P:RazorEngine.Compilation.ICompilerService.CodeInspectors">
            <summary>
            Gets or sets the set of code inspectors.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.ICompilerService.Debug">
            <summary>
            Gets or sets whether the compiler service is operating in debug mode.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.#ctor(System.Web.Razor.RazorCodeLanguage,System.Func{System.Web.Razor.Parser.ParserBase})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Compilation.CompilerServiceBase"/>
            </summary>
            <param name="codeLanguage">The code language.</param>
            <param name="markupParserFactory">The markup parser factory.</param>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.BuildTypeName(System.Type)">
            <summary>
            Builds a type name for the specified template type.
            </summary>
            <param name="templateType">The template type.</param>
            <returns>The string type name (including namespace).</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.CompileType(RazorEngine.Compilation.TypeContext)">
            <summary>
            Compiles the type defined in the specified type context.
            </summary>
            <param name="context">The type context which defines the type to compile.</param>
            <returns>The compiled type.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.CreateHost(System.Type,System.Type,System.String)">
            <summary>
            Creates a <see cref="T:RazorEngine.Compilation.RazorEngineHost"/> used for class generation.
            </summary>
            <param name="templateType">The template base type.</param>
            <param name="modelType">The model type.</param>
            <param name="className">The class name.</param>
            <returns>An instance of <see cref="T:RazorEngine.Compilation.RazorEngineHost"/>.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.GenerateConstructors(System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Generates any required contructors for the specified type.
            </summary>
            <param name="constructors">The set of constructors.</param>
            <param name="codeType">The code type declaration.</param>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.GetCodeCompileUnit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Type,System.Type)">
            <summary>
            Gets the code compile unit used to compile a type.
            </summary>
            <param name="className">The class name.</param>
            <param name="template">The template to compile.</param>
            <param name="namespaceImports">The set of namespace imports.</param>
            <param name="templateType">The template type.</param>
            <param name="modelType">The model type.</param>
            <returns>A <see cref="T:System.CodeDom.CodeCompileUnit"/> used to compile a type.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.GetGeneratorResult(RazorEngine.Compilation.RazorEngineHost,System.String)">
            <summary>
            Gets the generator result.
            </summary>
            <param name="host">The razor engine host.</param>
            <param name="template">The template.</param>
            <returns>The generator result.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.GetNamespaces(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets any required namespace imports.
            </summary>
            <param name="templateType">The template type.</param>
            <param name="otherNamespaces">The requested set of namespace imports.</param>
            <returns>A set of namespace imports.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.IncludeAssemblies">
            <summary>
            Returns a set of assemblies that must be referenced by the compiled template.
            </summary>
            <returns>The set of assemblies.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBase.Inspect(System.CodeDom.CodeCompileUnit)">
            <summary>
            Inspects the generated code compile unit.
            </summary>
            <param name="unit">The code compile unit.</param>
        </member>
        <member name="P:RazorEngine.Compilation.CompilerServiceBase.CodeInspectors">
            <summary>
            Gets or sets the set of code inspectors.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.CompilerServiceBase.CodeLanguage">
            <summary>
            Gets the code language.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.CompilerServiceBase.Debug">
            <summary>
            Gets or sets whether the compiler service is operating in debug mode.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.CompilerServiceBase.MarkupParserFactory">
            <summary>
            Gets the markup parser.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.CompilerServiceBuilder">
            <summary>
            Manages creation of <see cref="T:RazorEngine.Compilation.ICompilerService"/> instances.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBuilder.SetCompilerServiceFactory(RazorEngine.Compilation.ICompilerServiceFactory)">
            <summary>
            Sets the <see cref="T:RazorEngine.Compilation.ICompilerServiceFactory"/> used to create compiler service instances.
            </summary>
            <param name="factory">The compiler service factory to use.</param>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBuilder.GetCompilerService(RazorEngine.Language)">
            <summary>
            Gets the <see cref="T:RazorEngine.Compilation.ICompilerService"/> for the specfied language.
            </summary>
            <param name="language">The code language.</param>
            <returns>The compiler service instance.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServiceBuilder.GetDefaultCompilerService">
            <summary>
            Gets the <see cref="T:RazorEngine.Compilation.ICompilerService"/> for the default <see cref="T:RazorEngine.Language"/>.
            </summary>
            <returns>The compiler service instance.</returns>
        </member>
        <member name="T:RazorEngine.Compilation.CompilerServicesUtility">
            <summary>
            Provides service methods for compilation.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServicesUtility.IsAnonymousType(System.Type)">
            <summary>
            Determines if the specified type is an anonymous type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an anonymous type, otherwise false.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServicesUtility.IsDynamicType(System.Type)">
            <summary>
            Determines if the specified type is a dynamic type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an anonymous type, otherwise false.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServicesUtility.IsIteratorType(System.Type)">
            <summary>
            Determines if the specified type is a compiler generated iterator type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an iterator type, otherwise false.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServicesUtility.GenerateClassName">
            <summary>
            Generates a random class name.
            </summary>
            <returns>A new random class name.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServicesUtility.GetConstructors(System.Type)">
            <summary>
            Gets the public or protected constructors of the specified type.
            </summary>
            <param name="type">The target type.</param>
            <returns>An enumerable of constructors.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServicesUtility.GetFirstGenericInterface(System.Type)">
            <summary>
            Gets the first generic interface of the specified type if one exists.
            </summary>
            <param name="type">The target type.</param>
            <returns>The first generic interface if one exists, otherwise the first interface or the target type itself if there are no interfaces.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.CompilerServicesUtility.GetLoadedAssemblies">
            <summary>
            Gets an enumerable of all assemblies loaded in the current domain.
            </summary>
            <returns>An enumerable of loaded assemblies.</returns>
        </member>
        <member name="T:RazorEngine.Compilation.CSharp.CSharpCodeParser">
            <summary>
            Defines a code parser that supports the C# syntax.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.CSharp.CSharpCodeParser.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Compilation.CSharp.CSharpCodeParser"/>.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.CSharp.CSharpCodeParser.InheritsDirective">
            <summary>
            Parses the inherits statement.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.CSharp.CSharpCodeParser.ModelDirective">
            <summary>
            Parses the model statement.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.CSharp.CSharpDirectCompilerService">
            <summary>
            Defines a direct compiler service for the C# syntax.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.DirectCompilerServiceBase">
            <summary>
            Provides a base implementation of a direct compiler service.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.DirectCompilerServiceBase.#ctor(System.Web.Razor.RazorCodeLanguage,System.CodeDom.Compiler.CodeDomProvider,System.Func{System.Web.Razor.Parser.ParserBase})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Compilation.DirectCompilerServiceBase"/>.
            </summary>
            <param name="codeLanguage">The razor code language.</param>
            <param name="codeDomProvider">The code dom provider used to generate code.</param>
            <param name="markupParserFactory">The markup parser factory.</param>
        </member>
        <member name="M:RazorEngine.Compilation.DirectCompilerServiceBase.Compile(RazorEngine.Compilation.TypeContext)">
            <summary>
            Creates the compile results for the specified <see cref="T:RazorEngine.Compilation.TypeContext"/>.
            </summary>
            <param name="context">The type context.</param>
            <returns>The compiler results.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.DirectCompilerServiceBase.CompileType(RazorEngine.Compilation.TypeContext)">
            <summary>
            Compiles the type defined in the specified type context.
            </summary>
            <param name="context">The type context which defines the type to compile.</param>
            <returns>The compiled type.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.DirectCompilerServiceBase.Dispose">
            <summary>
            Releases managed resourced used by this instance.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.DirectCompilerServiceBase.Dispose(System.Boolean)">
            <summary>
            Releases managed resources used by this instance.
            </summary>
            <param name="disposing">Are we explicily disposing of this instance?</param>
        </member>
        <member name="M:RazorEngine.Compilation.CSharp.CSharpDirectCompilerService.#ctor(System.Boolean,System.Func{System.Web.Razor.Parser.ParserBase})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Compilation.CSharp.CSharpDirectCompilerService"/>.
            </summary>
            <param name="strictMode">Specifies whether the strict mode parsing is enabled.</param>
            <param name="markupParserFactory">The markup parser factory to use.</param>
        </member>
        <member name="M:RazorEngine.Compilation.CSharp.CSharpDirectCompilerService.IncludeAssemblies">
            <summary>
            Returns a set of assemblies that must be referenced by the compiled template.
            </summary>
            <returns>The set of assemblies.</returns>
        </member>
        <member name="T:RazorEngine.Compilation.CSharp.CSharpRazorCodeGenerator">
            <summary>
            Defines a code generator that supports C# syntax.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.CSharp.CSharpRazorCodeGenerator.#ctor(System.String,System.String,System.String,System.Web.Razor.RazorEngineHost,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RazorEngine.Compilation.CSharp.CSharpRazorCodeGenerator"/> class.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="rootNamespaceName">Name of the root namespace.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="host">The host.</param>
            <param name="strictMode">Flag to specify that this generator is running in struct mode.</param>
        </member>
        <member name="M:RazorEngine.Compilation.CSharp.CSharpRazorCodeGenerator.VisitError(System.Web.Razor.Parser.SyntaxTree.RazorError)">
            <summary>
            Visits an error generated through parsing.
            </summary>
            <param name="err">The error that was generated.</param>
        </member>
        <member name="P:RazorEngine.Compilation.CSharp.CSharpRazorCodeGenerator.StrictMode">
            <summary>
            Gets whether the code generator is running in strict mode.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.CSharp.CSharpRazorCodeLanguage">
            <summary>
            Provides a razor code language that supports the C# language.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.CSharp.CSharpRazorCodeLanguage.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance
            </summary>
            <param name="strictMode">Flag to determine whether strict mode is enabled.</param>
        </member>
        <member name="M:RazorEngine.Compilation.CSharp.CSharpRazorCodeLanguage.CreateCodeGenerator(System.String,System.String,System.String,System.Web.Razor.RazorEngineHost)">
            <summary>
            Creates the code generator.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="rootNamespaceName">Name of the root namespace.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="host">The host.</param>
            <returns>An instance of <see cref="T:System.Web.Razor.Generator.RazorCodeGenerator"/>.</returns>
        </member>
        <member name="P:RazorEngine.Compilation.CSharp.CSharpRazorCodeLanguage.StrictMode">
            <summary>
            Gets whether strict mode is enabled.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.DefaultCompilerServiceFactory">
            <summary>
            Provides a default implementation of a <see cref="T:RazorEngine.Compilation.ICompilerServiceFactory"/>.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.ICompilerServiceFactory">
            <summary>
            Defines the required contract for implementing a compiler service factory.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.ICompilerServiceFactory.CreateCompilerService(RazorEngine.Language)">
            <summary>
            Creates a <see cref="T:RazorEngine.Compilation.ICompilerService"/> that supports the specified language.
            </summary>
            <param name="language">The <see cref="T:RazorEngine.Language"/>.</param>
            <returns>An instance of <see cref="T:RazorEngine.Compilation.ICompilerService"/>.</returns>
        </member>
        <member name="M:RazorEngine.Compilation.DefaultCompilerServiceFactory.CreateCompilerService(RazorEngine.Language)">
            <summary>
            Creates a <see cref="T:RazorEngine.Compilation.ICompilerService"/> that supports the specified language.
            </summary>
            <param name="language">The <see cref="T:RazorEngine.Language"/>.</param>
            <returns>An instance of <see cref="T:RazorEngine.Compilation.ICompilerService"/>.</returns>
        </member>
        <member name="T:RazorEngine.Compilation.HasDynamicModelAttribute">
            <summary>
            Defines an attribute that marks the presence of a dynamic model in a template.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.Inspectors.ICodeInspector">
            <summary>
            Defines the required contract for implementing a code inspector.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.Inspectors.ICodeInspector.Inspect(System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod)">
            <summary>
            Inspects the specified code unit.
            </summary>
            <param name="unit">The code unit.</param>
            <param name="ns">The code namespace declaration.</param>
            <param name="type">The code type declaration.</param>
            <param name="executeMethod">The code method declaration for the Execute method.</param>
        </member>
        <member name="T:RazorEngine.Compilation.RazorDynamicObject">
            <summary>
            Defines a dynamic object.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.RazorDynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gets the value of the specified member.
            </summary>
            <param name="binder">The current binder.</param>
            <param name="result">The member result.</param>
            <returns>True.</returns>
        </member>
        <member name="P:RazorEngine.Compilation.RazorDynamicObject.Model">
            <summary>
            Gets or sets the model.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.RazorEngineHost">
            <summary>
            Defines the custom razor engine host.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.RazorEngineHost.#ctor(System.Web.Razor.RazorCodeLanguage,System.Func{System.Web.Razor.Parser.ParserBase})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Compilation.RazorEngineHost"/>.
            </summary>
            <param name="language">The code language.</param>
            <param name="markupParserFactory">The markup parser factory delegate.</param>
        </member>
        <member name="M:RazorEngine.Compilation.RazorEngineHost.DecorateCodeParser(System.Web.Razor.Parser.ParserBase)">
            <summary>
            Decorates the code parser.
            </summary>
            <param name="incomingCodeParser">The code parser.</param>
            <returns>The decorated parser.</returns>
        </member>
        <member name="P:RazorEngine.Compilation.RazorEngineHost.DefaultBaseTemplateType">
            <summary>
            Gets or sets the default template type.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.RazorEngineHost.DefaultModelType">
            <summary>
            Gets or sets the default model type.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.TypeContext">
            <summary>
            Defines a type context that describes a template to compile.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.TypeContext.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Compilation.TypeContext"/>.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.TypeContext.ClassName">
            <summary>
            Gets the class name.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.TypeContext.ModelType">
            <summary>
            Gets or sets the model type.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.TypeContext.Namespaces">
            <summary>
            Gets the set of namespace imports.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.TypeContext.TemplateContent">
            <summary>
            Gets or sets the template content.
            </summary>
        </member>
        <member name="P:RazorEngine.Compilation.TypeContext.TemplateType">
            <summary>
            Gets or sets the base template type.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.VisualBasic.VBCodeParser">
            <summary>
            Defines a code parser that supports the VB syntax.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.VisualBasic.VBCodeParser.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Compilation.VisualBasic.VBCodeParser"/>
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.VisualBasic.VBCodeParser.InheritsStatement">
            <summary>
            Parses the inherits statement.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.VisualBasic.VBCodeParser.ModelTypeDirective">
            <summary>
            Parses the modeltype statement.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.VisualBasic.VBDirectCompilerService">
            <summary>
            Defines a direct compiler service for the VB syntax.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.VisualBasic.VBDirectCompilerService.#ctor(System.Boolean,System.Func{System.Web.Razor.Parser.ParserBase})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Compilation.VisualBasic.VBDirectCompilerService"/>.
            </summary>
            <param name="strictMode">Specifies whether the strict mode parsing is enabled.</param>
            <param name="markupParserFactory">The markup parser to use.</param>
        </member>
        <member name="T:RazorEngine.Compilation.VisualBasic.VBRazorCodeGenerator">
            <summary>
            Defines a code generator that supports VB syntax.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.VisualBasic.VBRazorCodeGenerator.#ctor(System.String,System.String,System.String,System.Web.Razor.RazorEngineHost,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RazorEngine.Compilation.VisualBasic.VBRazorCodeGenerator"/> class.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="rootNamespaceName">Name of the root namespace.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="host">The host.</param>
            <param name="strictMode">Flag to specify that this generator is running in struct mode.</param>
        </member>
        <member name="M:RazorEngine.Compilation.VisualBasic.VBRazorCodeGenerator.VisitError(System.Web.Razor.Parser.SyntaxTree.RazorError)">
            <summary>
            Visits an error generated through parsing.
            </summary>
            <param name="err">The error that was generated.</param>
        </member>
        <member name="P:RazorEngine.Compilation.VisualBasic.VBRazorCodeGenerator.StrictMode">
            <summary>
            Gets whether the code generator is running in strict mode.
            </summary>
        </member>
        <member name="T:RazorEngine.Compilation.VisualBasic.VBRazorCodeLanguage">
            <summary>
            Provides a razor code language that supports the VB language.
            </summary>
        </member>
        <member name="M:RazorEngine.Compilation.VisualBasic.VBRazorCodeLanguage.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance
            </summary>
            <param name="strictMode">Flag to determine whether strict mode is enabled.</param>
        </member>
        <member name="M:RazorEngine.Compilation.VisualBasic.VBRazorCodeLanguage.CreateCodeGenerator(System.String,System.String,System.String,System.Web.Razor.RazorEngineHost)">
            <summary>
            Creates the code generator.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="rootNamespaceName">Name of the root namespace.</param>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="host">The host.</param>
            <returns>An instance of <see cref="T:System.Web.Razor.Generator.RazorCodeGenerator"/>.</returns>
        </member>
        <member name="P:RazorEngine.Compilation.VisualBasic.VBRazorCodeLanguage.StrictMode">
            <summary>
            Gets whether strict mode is enabled.
            </summary>
        </member>
        <member name="T:RazorEngine.Configuration.TemplateServiceConfiguration">
            <summary>
            Provides a default implementation of a template service configuration.
            </summary>
        </member>
        <member name="T:RazorEngine.Configuration.ITemplateServiceConfiguration">
            <summary>
            Defines the required contract for implementing template service configuration.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.ITemplateServiceConfiguration.Activator">
            <summary>
            Gets the activator.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.ITemplateServiceConfiguration.BaseTemplateType">
            <summary>
            Gets the base template type.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.ITemplateServiceConfiguration.CodeInspectors">
            <summary>
            Gets the code inspectors.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.ITemplateServiceConfiguration.CompilerServiceFactory">
            <summary>
            Gets the compiler service factory.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.ITemplateServiceConfiguration.Debug">
            <summary>
            Gets whether the template service is operating in debug mode.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.ITemplateServiceConfiguration.EncodedStringFactory">
            <summary>
            Gets the encoded string factory.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.ITemplateServiceConfiguration.Language">
            <summary>
            Gets the language.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.ITemplateServiceConfiguration.Namespaces">
            <summary>
            Gets the namespaces.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.ITemplateServiceConfiguration.Resolver">
            <summary>
            Gets the template resolver.
            </summary>
        </member>
        <member name="M:RazorEngine.Configuration.TemplateServiceConfiguration.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Configuration.TemplateServiceConfiguration"/>.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.Activator">
            <summary>
            Gets or sets the activator.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.BaseTemplateType">
            <summary>
            Gets or sets the base template type.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.RazorEngine#Configuration#ITemplateServiceConfiguration#CodeInspectors">
            <summary>
            Gets the set of code inspectors.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.CodeInspectors">
            <summary>
            Gets the set of code inspectors.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.CompilerServiceFactory">
            <summary>
            Gets or sets the compiler service factory.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.Debug">
            <summary>
            Gets whether the template service is operating in debug mode.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.EncodedStringFactory">
            <summary>
            Gets or sets the encoded string factory.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.Language">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.Namespaces">
            <summary>
            Gets or sets the collection of namespaces.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.TemplateServiceConfiguration.Resolver">
            <summary>
            Gets or sets the template resolver.
            </summary>
        </member>
        <member name="T:RazorEngine.Configuration.FluentConfigurationBuilder">
            <summary>
            Provides a default implementation of a <see cref="T:RazorEngine.Configuration.IConfigurationBuilder"/>.
            </summary>
        </member>
        <member name="T:RazorEngine.Configuration.IConfigurationBuilder">
            <summary>
            Defines the required contract for implementing a configuration builder.
            </summary>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.ActivateUsing(RazorEngine.Templating.IActivator)">
            <summary>
            Sets the activator.
            </summary>
            <param name="activator">The activator instance.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.ActivateUsing``1">
            <summary>
            Sets the activator.
            </summary>
            <typeparam name="TActivator">The activator type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.ActivateUsing(System.Func{RazorEngine.Templating.InstanceContext,RazorEngine.Templating.ITemplate})">
            <summary>
            Sets the activator.
            </summary>
            <param name="activator">The activator delegate.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.AddInspector``1">
            <summary>
            Adds the specified code inspector.
            </summary>
            <typeparam name="TInspector">The code inspector type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.AddInspector(RazorEngine.Compilation.Inspectors.ICodeInspector)">
            <summary>
            Adds the specified code inspector.
            </summary>
            <param name="inspector">The code inspector.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.CompileUsing(RazorEngine.Compilation.ICompilerServiceFactory)">
            <summary>
            Sets the compiler service factory.
            </summary>
            <param name="factory">The compiler service factory.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.CompileUsing``1">
            <summary>
            Sets the compiler service factory.
            </summary>
            <typeparam name="TCompilerServiceFactory">The compiler service factory type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.EncodeUsing(RazorEngine.Text.IEncodedStringFactory)">
            <summary>
            Sets the encoded string factory.
            </summary>
            <param name="factory">The encoded string factory.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.EncodeUsing``1">
            <summary>
            Sets the encoded string factory.
            </summary>
            <typeparam name="TEncodedStringFactory">The encoded string factory type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.ResolveUsing``1">
            <summary>
            Sets the resolve used to locate unknown templates.
            </summary>
            <typeparam name="TResolver">The resolve type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.ResolveUsing(RazorEngine.Templating.ITemplateResolver)">
            <summary>
            Sets the resolver used to locate unknown templates.
            </summary>
            <param name="resolver">The resolver instance to use.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.ResolveUsing(System.Func{System.String,System.String})">
            <summary>
            Sets the resolver delegate used to locate unknown templates.
            </summary>
            <param name="resolver">The resolver delegate to use.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.IncludeNamespaces(System.String[])">
            <summary>
            Includes the specified namespaces
            </summary>
            <param name="namespaces">The set of namespaces to include.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.UseDefaultActivator">
            <summary>
            Sets the default activator.
            </summary>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.UseDefaultCompilerServiceFactory">
            <summary>
            Sets the default compiler service factory.
            </summary>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.UseDefaultEncodedStringFactory">
            <summary>
            Sets the default encoded string factory.
            </summary>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.WithBaseTemplateType(System.Type)">
            <summary>
            Sets the base template type.
            </summary>
            <param name="baseTemplateType">The base template type.</param>
            <returns>The current configuration builder/.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.WithCodeLanguage(RazorEngine.Language)">
            <summary>
            Sets the code language.
            </summary>
            <param name="language">The code language.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.IConfigurationBuilder.WithEncoding(RazorEngine.Encoding)">
            <summary>
            Sets the encoding.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.#ctor(RazorEngine.Configuration.TemplateServiceConfiguration)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Configuration.FluentConfigurationBuilder"/>.
            </summary>
            <param name="config">The default configuration that we build a new configuration from.</param>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.ActivateUsing(RazorEngine.Templating.IActivator)">
            <summary>
            Sets the activator.
            </summary>
            <param name="activator">The activator instance.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.ActivateUsing``1">
            <summary>
            Sets the activator.
            </summary>
            <typeparam name="TActivator">The activator type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.ActivateUsing(System.Func{RazorEngine.Templating.InstanceContext,RazorEngine.Templating.ITemplate})">
            <summary>
            Sets the activator.
            </summary>
            <param name="activator">The activator delegate.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.AddInspector``1">
            <summary>
            Adds the specified code inspector.
            </summary>
            <typeparam name="TInspector">The code inspector type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.AddInspector(RazorEngine.Compilation.Inspectors.ICodeInspector)">
            <summary>
            Adds the specified code inspector.
            </summary>
            <param name="inspector">The code inspector.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.CompileUsing(RazorEngine.Compilation.ICompilerServiceFactory)">
            <summary>
            Sets the compiler service factory.
            </summary>
            <param name="factory">The compiler service factory.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.CompileUsing``1">
            <summary>
            Sets the compiler service factory.
            </summary>
            <typeparam name="TCompilerServiceFactory">The compiler service factory type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.EncodeUsing(RazorEngine.Text.IEncodedStringFactory)">
            <summary>
            Sets the encoded string factory.
            </summary>
            <param name="factory">The encoded string factory.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.EncodeUsing``1">
            <summary>
            Sets the encoded string factory.
            </summary>
            <typeparam name="TEncodedStringFactory">The encoded string factory type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.IncludeNamespaces(System.String[])">
            <summary>
            Includes the specified namespaces
            </summary>
            <param name="namespaces">The set of namespaces to include.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.ResolveUsing``1">
            <summary>
            Sets the resolve used to locate unknown templates.
            </summary>
            <typeparam name="TResolver">The resolve type.</typeparam>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.ResolveUsing(RazorEngine.Templating.ITemplateResolver)">
            <summary>
            Sets the resolver used to locate unknown templates.
            </summary>
            <param name="resolver">The resolver instance to use.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.ResolveUsing(System.Func{System.String,System.String})">
            <summary>
            Sets the resolver delegate used to locate unknown templates.
            </summary>
            <param name="resolver">The resolver delegate to use.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.UseDefaultActivator">
            <summary>
            Sets the default activator.
            </summary>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.UseDefaultCompilerServiceFactory">
            <summary>
            Sets the default compiler service factory.
            </summary>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.UseDefaultEncodedStringFactory">
            <summary>
            Sets the default encoded string factory.
            </summary>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.WithBaseTemplateType(System.Type)">
            <summary>
            Sets the base template type.
            </summary>
            <param name="baseTemplateType">The base template type.</param>
            <returns>The current configuration builder/.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.WithCodeLanguage(RazorEngine.Language)">
            <summary>
            Sets the code language.
            </summary>
            <param name="language">The code language.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.FluentConfigurationBuilder.WithEncoding(RazorEngine.Encoding)">
            <summary>
            Sets the encoding.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>The current configuration builder.</returns>
        </member>
        <member name="T:RazorEngine.Configuration.FluentTemplateServiceConfiguration">
            <summary>
            Defines a fluent template service configuration
            </summary>
        </member>
        <member name="M:RazorEngine.Configuration.FluentTemplateServiceConfiguration.#ctor(System.Action{RazorEngine.Configuration.IConfigurationBuilder})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Configuration.FluentTemplateServiceConfiguration"/>.
            </summary>
            <param name="config">The delegate used to create the configuration.</param>
        </member>
        <member name="P:RazorEngine.Configuration.FluentTemplateServiceConfiguration.Activator">
            <summary>
            Gets or sets the activator.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.FluentTemplateServiceConfiguration.BaseTemplateType">
            <summary>
            Gets the base template type.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.FluentTemplateServiceConfiguration.CodeInspectors">
            <summary>
            Gets the set of code inspectors.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.FluentTemplateServiceConfiguration.CompilerServiceFactory">
            <summary>
            Gets or sets the compiler service factory.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.FluentTemplateServiceConfiguration.Debug">
            <summary>
            Gets whether the template service is operating in debug mode.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.FluentTemplateServiceConfiguration.EncodedStringFactory">
            <summary>
            Gets or sets the encoded string factory.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.FluentTemplateServiceConfiguration.Language">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.FluentTemplateServiceConfiguration.Namespaces">
            <summary>
            Gets or sets the collection of namespaces.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.FluentTemplateServiceConfiguration.Resolver">
            <summary>
            Gets the resolver.
            </summary>
        </member>
        <member name="T:RazorEngine.Configuration.RazorEngineConfigurationSection">
            <summary>
            Defines the main configuration section for the RazorEngine.
            </summary>
        </member>
        <member name="M:RazorEngine.Configuration.RazorEngineConfigurationSection.GetConfiguration">
            <summary>
            Gets an instance of <see cref="T:RazorEngine.Configuration.RazorEngineConfigurationSection"/> that represents the current configuration.
            </summary>
            <returns>An instance of <see cref="T:RazorEngine.Configuration.RazorEngineConfigurationSection"/>, or null if no configuration is specified.</returns>
        </member>
        <member name="P:RazorEngine.Configuration.RazorEngineConfigurationSection.ActivatorType">
            <summary>
            Gets the activator type.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.RazorEngineConfigurationSection.CompilerServiceFactoryType">
            <summary>
            Gets the compiler service factory type.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.RazorEngineConfigurationSection.DefaultLanguage">
            <summary>
            Gets or sets the default language.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.RazorEngineConfigurationSection.Namespaces">
            <summary>
            Gets the collection of namespaces.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.RazorEngineConfigurationSection.TemplateResolverType">
            <summary>
            Gets the template resolver type.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.RazorEngineConfigurationSection.TemplateServices">
            <summary>
            Gets the collection of template service configurations.
            </summary>
        </member>
        <member name="T:RazorEngine.Configuration.Xml.NamespaceConfigurationElement">
            <summary>
            Defines a configuration of a namespace.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.NamespaceConfigurationElement.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="T:RazorEngine.Configuration.Xml.NamespaceConfigurationElementCollection">
            <summary>
            Defines a collection of <see cref="T:RazorEngine.Configuration.Xml.NamespaceConfigurationElement"/> instances.
            </summary>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.NamespaceConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/> for use with the collection.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElement"/> instance.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.NamespaceConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets a unique key for the specified element.
            </summary>
            <param name="element">The configuration element.</param>
            <returns>The key for the element.</returns>
        </member>
        <member name="T:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElement">
            <summary>
            Defines a configuration of a template service.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElement.BaseTemplateType">
            <summary>
            Gets the base template type.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElement.Debug">
            <summary>
            Gets whether the template service is in debug mode.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElement.EncodedStringFactoryType">
            <summary>
            Gets the encoded string factory type.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElement.Language">
            <summary>
            Gets the language.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElement.Name">
            <summary>
            Gets the name of the template service.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElement.Namespaces">
            <summary>
            Gets the collection of namespaces.
            </summary>
        </member>
        <member name="T:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElementCollection">
            <summary>
            Defines a collection of <see cref="T:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElement"/> instances.
            </summary>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/> for use with the collection.
            </summary>
            <returns>The <see cref="T:System.Configuration.ConfigurationElement"/> instance.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.TemplateServiceConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets a unique key for the specified element.
            </summary>
            <param name="element">The configuration element.</param>
            <returns>The key for the element.</returns>
        </member>
        <member name="T:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration">
            <summary>
            Represents a template service configuration that supports the xml configuration mechanism.
            </summary>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.#ctor(System.String)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration"/>.
            </summary>
            <param name="name">The name of the template service configuration.</param>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.AddNamespaces(RazorEngine.Configuration.Xml.NamespaceConfigurationElementCollection)">
            <summary>
            Adds the namespaces from the specified collection.
            </summary>
            <param name="namespaces">The set of namespace configurations.</param>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.GetInstance``1(System.Type)">
            <summary>
            Gets an instance of the specified type.
            </summary>
            <typeparam name="T">The expected instance type.</typeparam>
            <param name="type">The type.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.GetType(System.String)">
            <summary>
            Gets the type with the specified name.
            </summary>
            <param name="typeName">The type name.</param>
            <returns></returns>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.InitialiseConfiguration(System.String)">
            <summary>
            Initialises the configuration.
            </summary>
            <param name="name">The name of the template service configuration.</param>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.InitialiseConfiguration(RazorEngine.Configuration.RazorEngineConfigurationSection,RazorEngine.Configuration.Xml.TemplateServiceConfigurationElement)">
            <summary>
            Initialises the configuration.
            </summary>
            <param name="config">The core configuration.</param>
            <param name="serviceConfig">The service configuration.</param>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.SetActivator(System.String)">
            <summary>
            Sets the activator.
            </summary>
            <param name="activatorType">The activator type.</param>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.SetBaseTemplateType(System.String)">
            <summary>
            Sets the base template type.
            </summary>
            <param name="baseTemplateType">The base template type.</param>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.SetCompilerServiceFactory(System.String)">
            <summary>
            Sets the compiler service factory.
            </summary>
            <param name="compilerServiceFactoryType">The compiler service factory type.</param>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.SetEncodedStringFactory(System.String)">
            <summary>
            Sets the encoded string factory.
            </summary>
            <param name="encodedStringFactoryType"></param>
        </member>
        <member name="M:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.SetTemplateResolver(System.String)">
            <summary>
            Sets the template resolver.
            </summary>
            <param name="templateResolverType">The template resolver type.</param>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.Activator">
            <summary>
            Gets the activator.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.BaseTemplateType">
            <summary>
            Gets the base template type.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.CodeInspectors">
            <summary>
            Gets the code inspectors.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.CompilerServiceFactory">
            <summary>
            Gets the compiler service factory.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.Debug">
            <summary>
            Gets whether the template service is operating in debug mode.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.EncodedStringFactory">
            <summary>
            Gets the encoded string factory.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.Language">
            <summary>
            Gets the language.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.Namespaces">
            <summary>
            Gets the namespaces.
            </summary>
        </member>
        <member name="P:RazorEngine.Configuration.Xml.XmlTemplateServiceConfiguration.Resolver">
            <summary>
            Gets the template resolver.
            </summary>
        </member>
        <member name="T:RazorEngine.Encoding">
            <summary>
            Defines the possible values for encoding.
            </summary>
        </member>
        <member name="F:RazorEngine.Encoding.Html">
            <summary>
            Use html encoding.
            </summary>
        </member>
        <member name="F:RazorEngine.Encoding.Raw">
            <summary>
            Use raw text (no encoding)
            </summary>
        </member>
        <member name="T:RazorEngine.Language">
            <summary>
            Defines the possible supported code languages.
            </summary>
        </member>
        <member name="F:RazorEngine.Language.CSharp">
            <summary>
            C# Language
            </summary>
        </member>
        <member name="F:RazorEngine.Language.VisualBasic">
            <summary>
            Visual Basic Language
            </summary>
        </member>
        <member name="T:RazorEngine.Razor">
            <summary>
            Provides quick access to template functions.
            </summary>
        </member>
        <member name="M:RazorEngine.Razor.Compile(System.String,System.String)">
            <summary>
            Compiles the specified template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="cacheName">The name of the template type in cache.</param>
        </member>
        <member name="M:RazorEngine.Razor.Compile(System.String,System.Type,System.String)">
            <summary>
            Compiles the specified template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="modelType">The model type.</param>
            <param name="cacheName">The name of the template type in cache.</param>
        </member>
        <member name="M:RazorEngine.Razor.Compile``1(System.String,System.String)">
            <summary>
            Compiles the specified template.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplate">The string template.</param>
            <param name="cacheName">The name of the template type in cache.</param>
        </member>
        <member name="M:RazorEngine.Razor.CreateTemplate(System.String)">
            <summary>
            Creates an instance of <see cref="T:RazorEngine.Templating.ITemplate"/> from the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="M:RazorEngine.Razor.CreateTemplate``1(System.String,``0)">
            <summary>
            Creates an instance of <see cref="T:RazorEngine.Templating.ITemplate`1"/> from the specified string template.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate`1"/>.</returns>
        </member>
        <member name="M:RazorEngine.Razor.CreateTemplates(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a set of templates from the specified string templates.
            </summary>
            <param name="razorTemplates">The set of templates to create <see cref="T:RazorEngine.Templating.ITemplate"/> instances for.</param>
            <param name="parallel">Flag to determine whether to create templates in parallel.</param>
            <returns>The enumerable set of template instances.</returns>
        </member>
        <member name="M:RazorEngine.Razor.CreateTemplates``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Creates a set of templates from the specified string templates and models.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplates">The set of templates to create <see cref="T:RazorEngine.Templating.ITemplate"/> instances for.</param>
            <param name="models">The set of models used to assign to templates.</param>
            <param name="parallel">Flag to determine whether to create templates in parallel.</param>
            <returns>The enumerable set of template instances.</returns>
        </member>
        <member name="M:RazorEngine.Razor.CreateTemplateType(System.String)">
            <summary>
            Creates a <see cref="T:System.Type"/> that can be used to instantiate an instance of a template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <returns>An instance of <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:RazorEngine.Razor.CreateTemplateType(System.String,System.Type)">
            <summary>
            Creates a <see cref="T:System.Type"/> that can be used to instantiate an instance of a template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="modelType">The model type.</param>
            <returns>An instance of <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:RazorEngine.Razor.CreateTemplateTypes(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Crates a set of template types from the specfied string templates.
            </summary>
            <param name="razorTemplates">The set of templates to create <see cref="T:System.Type"/> instances for.</param>
            <param name="parallel">Flag to determine whether to create template types in parallel.</param>
            <returns>The set of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Razor.CreateTemplateTypes(System.Collections.Generic.IEnumerable{System.String},System.Type,System.Boolean)">
            <summary>
            Creates a set of template types from the specfied string templates.
            </summary>
            <param name="razorTemplates">The set of templates to create <see cref="T:System.Type"/> instances for.</param>
            <param name="modelType">The model type.</param>
            <param name="parallel">Flag to determine whether to create template types in parallel.</param>
            <returns>The set of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Razor.GetTemplate(System.String,System.String)">
            <summary>
            Gets an instance of the template using the cached compiled type, or compiles the template type
            if it does not exist in the cache.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="cacheName">The name of the template type in the cache.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="M:RazorEngine.Razor.GetTemplate``1(System.String,``0,System.String)">
            <summary>
            Gets an instance of the template using the cached compiled type, or compiles the template type
            if it does not exist in the cache.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance.</param>
            <param name="cacheName">The name of the template type in the cache.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate`1"/>.</returns>
        </member>
        <member name="M:RazorEngine.Razor.GetTemplates(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets the set of template instances for the specified string templates. Cached templates will be considered
            and if they do not exist, new types will be created and instantiated.
            </summary>
            <param name="razorTemplates">The set of templates to create.</param>
            <param name="cacheNames">The set of cache names.</param>
            <param name="parallel">Flag to determine whether to get the templates in parallel.</param>
            <returns>The set of <see cref="T:RazorEngine.Templating.ITemplate"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Razor.GetTemplates``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets the set of template instances for the specified string templates. Cached templates will be considered
            and if they do not exist, new types will be created and instantiated.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplates">The set of templates to create.</param>
            <param name="models">The set of models.</param>
            <param name="cacheNames">The set of cache names.</param>
            <param name="parallel">Flag to determine whether to get the templates in parallel.</param>
            <returns>The set of <see cref="T:RazorEngine.Templating.ITemplate"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Parse(System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Parse(System.String,System.String)">
            <summary>
            Parses and returns the result of the specified string template. 
            This method will provide a cache check to see if the compiled template type already exists and is valid.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Parse(System.String,System.Object)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Parse``1(System.String,``0)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Parse``1(System.String,``0,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Parse``1(System.String,``0,RazorEngine.Templating.DynamicViewBag,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Parse(System.String,System.Object,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Parse(System.String,System.Object,RazorEngine.Templating.DynamicViewBag,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Parses the template and merges with the many models provided.
            </summary>
            <param name="razorTemplate">The razor template.</param>
            <param name="models">
            The set of models (must contain at least one model).
            </param>
            <param name="parallel">Flag to determine whether parsing in parallel.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="cacheNames">
            The set of cache names or NULL if no caching is desired for templates.
            Individual elements in this set may be NULL if caching is not desired for a specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="cacheNames">
            The set of cache names or NULL if no caching is desired for templates.
            Individual elements in this set may be NULL if caching is not desired for a specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RazorEngine.Templating.DynamicViewBag},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="viewBags">
            The set of initial ViewBag contents or NULL for an initially empty ViewBag for all templates.
            Individual elements in this set may be NULL if an initially empty ViewBag is desired for a specific template.
            </param>
            <param name="cacheNames">
            The set of cache names or NULL if no caching is desired for templates.
            Individual elements in this set may be NULL if caching is not desired for a specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Parses the template and merges with the many models provided.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplate">The razor template.</param>
            <param name="models">
            The set of models (must contain at least one model).
            </param>
            <param name="parallel">Flag to determine whether parsing in parallel.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="cacheNames">
            The set of cache names or NULL if no caching is desired for templates.
            Individual elements in this set may be NULL if caching is not desired for a specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.ParseMany``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RazorEngine.Templating.DynamicViewBag},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="viewBags">
            The set of initial ViewBag contents or NULL for an initially empty ViewBag for all templates.
            Individual elements in this set may be NULL if an initially empty ViewBag is desired for a specific template.
            </param>
            <param name="cacheNames">
            The set of cache names or NULL if no caching is desired for templates.
            Individual elements in this set may be NULL if caching is not desired for a specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Resolve(System.String)">
            <summary>
            Resolves the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <returns>The resolved template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Resolve(System.String,System.Object)">
            <summary>
            Resolves the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model for the template.</param>
            <returns>The resolved template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Resolve``1(System.String,``0)">
            <summary>
            Resolves the template with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model for the template.</param>
            <returns>The resolved template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Run(System.String)">
            <summary>
            Runs the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Run(System.String,System.Object)">
            <summary>
            Runs the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Run(System.String,System.Object,RazorEngine.Templating.DynamicViewBag)">
            <summary>
            Runs the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Run``1(System.String,``0)">
            <summary>
            Runs the template with the specified name.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.Run``1(System.String,``0,RazorEngine.Templating.DynamicViewBag)">
            <summary>
            Runs the template with the specified name.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Razor.SetTemplateService(RazorEngine.Templating.ITemplateService)">
            <summary>
            Sets the template service.
            </summary>
            <param name="service">The template service.</param>
        </member>
        <member name="P:RazorEngine.Razor.TemplateService">
            <summary>
            Gets the template service.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.CachedTemplateItem">
            <summary>
            Defines a cached template item.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.CachedTemplateItem.#ctor(System.Int32,System.Type)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.CachedTemplateItem"/>.
            </summary>
            <param name="cachedHashCode">The cached hash code.</param>
            <param name="templateType">The template type.</param>
        </member>
        <member name="P:RazorEngine.Templating.CachedTemplateItem.CachedHashCode">
            <summary>
            Gets the cached hash code of the template.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.CachedTemplateItem.TemplateType">
            <summary>
            Gets the template type.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.HtmlTemplateBase`1">
            <summary>
            Provides a base implementation of an html template with a model.
            </summary>
            <remarks>
            This type does not currently serve a purpose, and the WriteAttribute* API has been migrated to the TemplateBase type. This type is not deprecated, as it
            may form the basis for a future template that supports MVC like @Html syntax.
            </remarks>
            <typeparam name="T">The model type.</typeparam>
        </member>
        <member name="T:RazorEngine.Templating.TemplateBase`1">
            <summary>
            Provides a base implementation of a template with a model.
            </summary>
            <typeparam name="T">The model type.</typeparam>
        </member>
        <member name="T:RazorEngine.Templating.TemplateBase">
            <summary>
            Provides a base implementation of a template.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.ITemplate">
            <summary>
            Defines the required contract for implementing a template.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.ITemplate.Execute">
            <summary>
            Executes the compiled template.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.ITemplate.Run(RazorEngine.Templating.ExecuteContext)">
            <summary>
            Runs the template and returns the result.
            </summary>
            <param name="context">The current execution context.</param>
            <returns>The merged result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplate.Write(System.Object)">
            <summary>
            Writes the specified object to the result.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:RazorEngine.Templating.ITemplate.WriteLiteral(System.String)">
            <summary>
            Writes the specified string to the result.
            </summary>
            <param name="literal">The literal to write.</param>
        </member>
        <member name="P:RazorEngine.Templating.ITemplate.TemplateService">
            <summary>
            Sets the template service.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateBase"/>.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.DefineSection(System.String,System.Action)">
            <summary>
            Defines a section that can written out to a layout.
            </summary>
            <param name="name">The name of the section.</param>
            <param name="action">The delegate used to write the section.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.Include(System.String,System.Object)">
            <summary>
            Includes the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model or NULL if there is no model for the template.</param>
            <returns>The template writer helper.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.IsSectionDefined(System.String)">
            <summary>
            Determines if the section with the specified name has been defined.
            </summary>
            <param name="name">The section name.</param>
            <returns></returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.Execute">
            <summary>
            Executes the compiled template.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.Raw(System.String)">
            <summary>
            Returns the specified string as a raw string. This will ensure it is not encoded.
            </summary>
            <param name="rawString">The raw string to write.</param>
            <returns>An instance of <see cref="T:RazorEngine.Text.IEncodedString"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.ResolveLayout(System.String)">
            <summary>
            Resolves the layout template.
            </summary>
            <param name="name">The name of the layout template.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.RazorEngine#Templating#ITemplate#Run(RazorEngine.Templating.ExecuteContext)">
            <summary>
            Runs the template and returns the result.
            </summary>
            <param name="context">The current execution context.</param>
            <returns>The merged result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.RenderSection(System.String,System.Boolean)">
            <summary>
            Renders the section with the specified name.
            </summary>
            <param name="name">The name of the section.</param>
            <param name="isRequired">Flag to specify whether the section is required.</param>
            <returns>The template writer helper.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.RenderBody">
            <summary>
            Renders the body of the template.
            </summary>
            <returns>The template writer helper.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.Write(System.Object)">
            <summary>
            Writes the specified object to the result.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.Write(RazorEngine.Templating.TemplateWriter)">
            <summary>
            Writes the specified template helper result.
            </summary>
            <param name="helper">The template writer helper.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.WriteAttribute(System.String,RazorEngine.PositionTagged{System.String},RazorEngine.PositionTagged{System.String},RazorEngine.AttributeValue[])">
            <summary>
            Writes an attribute to the result.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.WriteAttributeTo(System.IO.TextWriter,System.String,RazorEngine.PositionTagged{System.String},RazorEngine.PositionTagged{System.String},RazorEngine.AttributeValue[])">
            <summary>
            Writes an attribute to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
            <param name="name">The name of the attribute to be written.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.WriteLiteral(System.String)">
            <summary>
            Writes the specified string to the result.
            </summary>
            <param name="literal">The literal to write.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.WriteLiteralTo(System.IO.TextWriter,System.String)">
            <summary>
            Writes a string literal to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
            <param name="literal">The literal to be written.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.WritePositionTaggedLiteral(System.IO.TextWriter,RazorEngine.PositionTagged{System.String})">
            <summary>
            Writes a <see cref="!:PositionTagged&lt;string&gt;"/> literal to the result.
            </summary>
            <param name="writer">The writer.</param>
            <param name="literal">The literal to be written.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.WriteTo(System.IO.TextWriter,System.Object)">
            <summary>
            Writes the specified object to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.WriteTo(System.IO.TextWriter,RazorEngine.Templating.TemplateWriter)">
            <summary>
            Writes the specfied template helper result to the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="helper">The template writer helper.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase.ResolveUrl(System.String)">
            <summary>
            Resolves the specified path
            </summary>
            <param name="path">The path.</param>
            <returns>The resolved path.</returns>
        </member>
        <member name="P:RazorEngine.Templating.TemplateBase.Layout">
            <summary>
            Gets or sets the layout template name.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.TemplateBase.TemplateService">
            <summary>
            Gets or sets the template service.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.TemplateBase.ViewBag">
            <summary>
            Gets the viewbag that allows sharing state between layout and child templates.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.TemplateBase.CurrentWriter">
            <summary>
            Gets the current writer.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.ITemplate`1">
            <summary>
            Defines the required contract for implementing a template with a model.
            </summary>
            <typeparam name="T">The model type.</typeparam>
        </member>
        <member name="P:RazorEngine.Templating.ITemplate`1.Model">
            <summary>
            Gets the or sets the model.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase`1.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateBase`1"/>.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase`1.Include(System.String,System.Object)">
            <summary>
            Includes the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model or NULL if there is no model for the template.</param>
            <returns>The template writer helper.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateBase`1.ResolveLayout(System.String)">
            <summary>
            Resolves the layout template.
            </summary>
            <param name="name">The name of the layout template.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="P:RazorEngine.Templating.TemplateBase`1.HasDynamicModel">
            <summary>
            Determines whether this template has a dynamic model.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.TemplateBase`1.Model">
            <summary>
            Gets or sets the model.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.DefaultActivator">
            <summary>
            Provides a default implementation of an <see cref="T:RazorEngine.Templating.IActivator"/>.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.IActivator">
            <summary>
            Defines the required contract for implementing an activator.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.IActivator.CreateInstance(RazorEngine.Templating.InstanceContext)">
            <summary>
            Creates an instance of the specifed template.
            </summary>
            <param name="context">The instance context.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.DefaultActivator.CreateInstance(RazorEngine.Templating.InstanceContext)">
            <summary>
            Creates an instance of the specifed template.
            </summary>
            <param name="context">The instance context.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="T:RazorEngine.Templating.DefaultAppDomainFactory">
            <summary>
            Provides a default implementation of an <see cref="T:System.AppDomain"/> factory.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.IAppDomainFactory">
            <summary>
            Defines the required contract for implementing an <see cref="T:System.AppDomain"/> factory.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.IAppDomainFactory.CreateAppDomain">
            <summary>
            Creates the <see cref="T:System.AppDomain"/>.
            </summary>
            <returns>The <see cref="T:System.AppDomain"/> instance.</returns>
        </member>
        <member name="M:RazorEngine.Templating.DefaultAppDomainFactory.CreateAppDomain">
            <summary>
            Creates the <see cref="T:System.AppDomain"/>.
            </summary>
            <returns>The <see cref="T:System.AppDomain"/> instance.</returns>
        </member>
        <member name="T:RazorEngine.Templating.DelegateActivator">
            <summary>
            Defines an activator that supports delegated activation.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.DelegateActivator.#ctor(System.Func{RazorEngine.Templating.InstanceContext,RazorEngine.Templating.ITemplate})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.DelegateActivator"/>.
            </summary>
            <param name="activator">The delegated used to create an instance of the template.</param>
        </member>
        <member name="M:RazorEngine.Templating.DelegateActivator.CreateInstance(RazorEngine.Templating.InstanceContext)">
            <summary>
            Creates an instance of the specifed template.
            </summary>
            <param name="context">The instance context.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="P:RazorEngine.Templating.DelegateActivator.Activator">
            <summary>
            Gets the activator.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.DelegateAppDomainFactory">
            <summary>
            Provides an <see cref="T:System.AppDomain"/> factory that supports delegated <see cref="T:System.AppDomain"/> creation.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.DelegateAppDomainFactory.#ctor(System.Func{System.AppDomain})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.DelegateAppDomainFactory"/>.
            </summary>
            <param name="factory">The factory delegate.</param>
        </member>
        <member name="M:RazorEngine.Templating.DelegateAppDomainFactory.CreateAppDomain">
            <summary>
            Creates the <see cref="T:System.AppDomain"/>.
            </summary>
            <returns>The <see cref="T:System.AppDomain"/> instance.</returns>
        </member>
        <member name="T:RazorEngine.Templating.DelegateTemplateResolver">
            <summary>
            Provides an <see cref="T:RazorEngine.Templating.ITemplateResolver"/> that supports delegated template resolution.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.ITemplateResolver">
            <summary>
            Defines the required contract for implementing a template resolver.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateResolver.Resolve(System.String)">
            <summary>
            Resolves the template content with the specified name.
            </summary>
            <param name="name">The name of the template to resolve.</param>
            <returns>The template content.</returns>
        </member>
        <member name="M:RazorEngine.Templating.DelegateTemplateResolver.#ctor(System.Func{System.String,System.String})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.DelegateTemplateResolver"/>.
            </summary>
            <param name="resolver">The resolver delegate.</param>
        </member>
        <member name="M:RazorEngine.Templating.DelegateTemplateResolver.Resolve(System.String)">
            <summary>
            Resolves the template content with the specified name.
            </summary>
            <param name="name">The name of the template to resolve.</param>
            <returns>The template content.</returns>
        </member>
        <member name="T:RazorEngine.Templating.DynamicViewBag">
            <summary>
            Defines a dynamic view bag.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.DynamicViewBag.GetDynamicMemberNames">
            <summary>
            Gets the set of dynamic member names.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.DynamicViewBag.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Attempts to read a dynamic member from the object.
            </summary>
            <param name="binder">The binder.</param>
            <param name="result">The result instance.</param>
            <returns>True, always.</returns>
        </member>
        <member name="M:RazorEngine.Templating.DynamicViewBag.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Attempts to set a value on the object.
            </summary>
            <param name="binder">The binder.</param>
            <param name="value">The value to set.</param>
            <returns>True, always.</returns>
        </member>
        <member name="M:RazorEngine.Templating.DynamicViewBag.AddValue(System.String,System.Object)">
            <summary>
            Add a value to this instance of DynamicViewBag.
            </summary>
            <param name="propertyName">
            The property name through which this value can be get/set.
            </param>
            <param name="value">
            The value that will be assigned to this property name.
            </param>
        </member>
        <member name="M:RazorEngine.Templating.DynamicViewBag.AddListValues(System.Collections.IList,System.String)">
            <summary>
            Adds values from the specified valueList to this instance of DynamicViewBag.
            </summary>
            <param name="valueList">
            A list of objects.  Each must have a public property of keyPropertyName.
            </param>
            <param name="keyPropertyName">
            The property name that will be retrieved for each object in the specified valueList
            and used as the key (property name) for the ViewBag.  This property must be of type string.
            </param>
        </member>
        <member name="M:RazorEngine.Templating.DynamicViewBag.AddDictionaryValues(System.Collections.IDictionary)">
            <summary>
            Adds values from the specified valueDictionary to this instance of DynamicViewBag.
            </summary>
            <param name="valueDictionary">
            A dictionary of objects.  The Key of each item in the dictionary will be used
            as the key (property name) for the ViewBag.
            </param>
        </member>
        <member name="M:RazorEngine.Templating.DynamicViewBag.AddDictionaryValuesEx(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds values from the specified valueDictionary to this instance of DynamicViewBag.
            </summary>
            <param name="valueDictionary">
            A generic dictionary of {string, object} objects.  The Key of each item in the 
            dictionary will be used as the key (property name) for the ViewBag.
            </param>
            <remarks>
            This method was intentionally not overloaded from AddDictionaryValues due to an ambiguous 
            signature when the caller passes in a Dictionary&lt;string, object&gt; as the valueDictionary.
            This is because the Dictionary&lt;TK, TV&gt;() class implements both IDictionary and IDictionary&lt;TK, TV&gt;.
            A Dictionary&lt;string, ???&gt; (any other type than object) will resolve to AddDictionaryValues.
            This is specifically for a generic List&lt;string, object&gt;, which does not resolve to
            an IDictionary interface.
            </remarks>
        </member>
        <member name="T:RazorEngine.Templating.ExecuteContext">
            <summary>
            Defines a context for tracking template execution.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.ExecuteContext.#ctor">
            <summary>
            Creates a new instance of ExecuteContext with an empty ViewBag.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.ExecuteContext.#ctor(RazorEngine.Templating.DynamicViewBag)">
            <summary>
            Creates a new instance of DynamicViewBag, setting initial values in the ViewBag.
            </summary>
            <param name="viewBag">The initial view bag data or NULL for an empty ViewBag.</param>
        </member>
        <member name="M:RazorEngine.Templating.ExecuteContext.DefineSection(System.String,System.Action)">
            <summary>
            Defines a section used in layouts.
            </summary>
            <param name="name">The name of the section.</param>
            <param name="action">The delegate action used to write the section at a later stage in the template execution.</param>
        </member>
        <member name="M:RazorEngine.Templating.ExecuteContext.GetSectionDelegate(System.String)">
            <summary>
            Gets the section delegate.
            </summary>
            <param name="name">The name of the section.</param>
            <returns>The section delegate.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ExecuteContext.PopBody">
            <summary>
            Pops the template writer helper off the stack.
            </summary>
            <returns>The template writer helper.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ExecuteContext.PushBody(RazorEngine.Templating.TemplateWriter)">
            <summary>
            Pushes the specified template writer helper onto the stack.
            </summary>
            <param name="bodyWriter">The template writer helper.</param>
        </member>
        <member name="P:RazorEngine.Templating.ExecuteContext.CurrentWriter">
            <summary>
            Gets the current writer.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.ExecuteContext.ViewBag">
            <summary>
            Gets the viewbag that allows sharing state.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.InstanceContext">
            <summary>
            Defines contextual information for a template instance.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.InstanceContext.#ctor(RazorEngine.Templating.TypeLoader,System.Type)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.InstanceContext"/>.
            </summary>
            <param name="loader">The type loader.</param>
            <param name="templateType">The template type.</param>
        </member>
        <member name="P:RazorEngine.Templating.InstanceContext.Loader">
            <summary>
            Gets the type loader.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.InstanceContext.TemplateType">
            <summary>
            Gets the template type.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.Parallel.DefaultParallelQueryPlan`1">
            <summary>
            Represents a default parallel query plan.
            </summary>
            <remarks>
            The <see cref="T:RazorEngine.Templating.Parallel.DefaultParallelQueryPlan`1"/> uses the default <see cref="T:System.Linq.ParallelQuery`1"/>
            result. The degree of parallelism by default is <code>Math.Min(ProcessorCount, 64)</code>.
            </remarks>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="T:RazorEngine.Templating.Parallel.IParallelQueryPlan`1">
            <summary>
            Defines the required contract for implementing a parallel query plan.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:RazorEngine.Templating.Parallel.IParallelQueryPlan`1.CreateQuery(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a parallel query for the specified source.
            </summary>
            <param name="source">The source enumerable.</param>
            <returns>The parallel query.</returns>
        </member>
        <member name="M:RazorEngine.Templating.Parallel.DefaultParallelQueryPlan`1.CreateQuery(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a parallel query for the specified source.
            </summary>
            <param name="source">The source enumerable.</param>
            <returns>The parallel query.</returns>
        </member>
        <member name="T:RazorEngine.Templating.IsolatedTemplateService">
            <summary>
            Provides template parsing and compilation in an isolated application domain.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.ITemplateService">
            <summary>
            Defines the required contract for implementing a template service.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.AddNamespace(System.String)">
            <summary>
            Adds a namespace that will be imported into the template.
            </summary>
            <param name="ns">The namespace to be imported.</param>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.Compile(System.String,System.Type,System.String)">
            <summary>
            Compiles the specified template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="modelType">The model type.</param>
            <param name="cacheName">The name of the template type in the cache.</param>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.CreateTemplate(System.String,System.Type,System.Object)">
            <summary>
            Creates an instance of <see cref="T:RazorEngine.Templating.ITemplate`1"/> from the specified string template.
            </summary>
            <param name="razorTemplate">
            The string template.
            If templateType is not NULL (precompiled template), this parameter may be NULL (unused).
            </param>
            <param name="templateType">
            The template type or NULL if the template type should be dynamically created.
            If razorTemplate is not NULL, this parameter may be NULL (unused).
            </param>
            <param name="model">The model instance or NULL if no model exists.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate`1"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.CreateTemplates(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Creates a set of templates from the specified string templates.
            </summary>
            <param name="razorTemplates">
            The set of templates to create or NULL if all template types are already created (see templateTypes).
            If this parameter is NULL, the the templateTypes parameter may not be NULL. 
            Individual elements in this set may be NULL if the corresponding templateTypes[i] is not NULL (precompiled template).
            </param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="templateTypes">
            The set of template types or NULL to dynamically create template types for each template.
            If this parameter is NULL, the the razorTemplates parameter may not be NULL. 
            Individual elements in this set may be NULL to dynamically create the template if the corresponding razorTemplates[i] is not NULL (dynamically compile template).
            </param>
            <param name="parallel">Flag to determine whether to create templates in parallel.</param>
            <returns>The enumerable set of template instances.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.CreateTemplateType(System.String,System.Type)">
            <summary>
            Creates a <see cref="T:System.Type"/> that can be used to instantiate an instance of a template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="modelType">The model type or NULL if no model exists.</param>
            <returns>An instance of <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.CreateTemplateTypes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Creates a set of template types from the specfied string templates.
            </summary>
            <param name="razorTemplates">The set of templates to create <see cref="T:System.Type"/> instances for.</param>
            <param name="modelTypes">
            The set of model types or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="parallel">Flag to determine whether to create template types in parallel.</param>
            <returns>The set of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.GetTemplate(System.String,System.Object,System.String)">
            <summary>
            Gets an instance of the template using the cached compiled type, or compiles the template type
            if it does not exist in the cache.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model or NULL if there is no model for this template.</param>
            <param name="cacheName">The name of the template type in the cache.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.GetTemplates(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets the set of template instances for the specified string templates. Cached templates will be considered
            and if they do not exist, new types will be created and instantiated.
            </summary>
            <param name="razorTemplates">The set of templates to create.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="cacheNames">The set of cache names.</param>
            <param name="parallel">Flag to determine whether to get the templates in parallel.</param>
            <returns>The set of <see cref="T:RazorEngine.Templating.ITemplate"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.HasTemplate(System.String)">
            <summary>
            Returns whether or not a template by the specified name has been created already.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <returns>Whether or not the template has been created.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.RemoveTemplate(System.String)">
            <summary>
            Remove a template by the specified name from the cache.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <returns>Whether or not the template has been removed.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.Parse(System.String,System.Object,RazorEngine.Templating.DynamicViewBag,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance or NULL if no model exists.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.Parse``1(System.String,System.Object,RazorEngine.Templating.DynamicViewBag,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <typeparam name="T">Type of the model. Used to find out the type of the model, if model is NULL</typeparam>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance or NULL if no model exists.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.ParseMany(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RazorEngine.Templating.DynamicViewBag},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="viewBags">
            The set of initial ViewBag contents or NULL for an initially empty ViewBag for all templates.
            Individual elements in this set may be NULL if an initially empty ViewBag is desired for a specific template.
            </param>
            <param name="cacheNames">
            The set of cache names or NULL if no caching is desired for templates.
            Individual elements in this set may be NULL if caching is not desired for a specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.Resolve(System.String,System.Object)">
            <summary>
            Resolves the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model for the template.</param>
            <returns>The resolved template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.Run(System.String,System.Object,RazorEngine.Templating.DynamicViewBag)">
            <summary>
            Runs the template with the specified cacheName.
            </summary>
            <param name="cacheName">The name of the template in cache.  The template must be in cache.</param>
            <param name="model">The model for the template or NULL if there is no model.</param>
            <param name="viewBag">The initial ViewBag contents NULL for an empty ViewBag.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.ITemplateService.Run(RazorEngine.Templating.ITemplate,RazorEngine.Templating.DynamicViewBag)">
            <summary>
            Runs the specified template.
            </summary>
            <param name="template">The template to run.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="P:RazorEngine.Templating.ITemplateService.EncodedStringFactory">
            <summary>
            Gets the encoded string factory.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.IsolatedTemplateService"/>
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.#ctor(RazorEngine.Language)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.IsolatedTemplateService"/>
            </summary>
            <param name="language">The code language.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.#ctor(RazorEngine.Encoding)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.IsolatedTemplateService"/>
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.#ctor(RazorEngine.Templating.IAppDomainFactory)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.IsolatedTemplateService"/>
            </summary>
            <param name="appDomainFactory">The application domain factory.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.#ctor(System.Func{System.AppDomain})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.IsolatedTemplateService"/>.
            </summary>
            <param name="appDomainFactory">The delegate used to create an application domain.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.#ctor(RazorEngine.Language,RazorEngine.Encoding,RazorEngine.Templating.IAppDomainFactory)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.IsolatedTemplateService"/>
            </summary>
            <param name="language">The code language.</param>
            <param name="encoding">The encoding.</param>
            <param name="appDomainFactory">The application domain factory.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.#ctor(RazorEngine.Language,System.Func{System.AppDomain})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.IsolatedTemplateService"/>.
            </summary>
            <param name="language">The code language.</param>
            <param name="appDomainFactory">The delegate used to create an application domain.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.#ctor(RazorEngine.Language,RazorEngine.Encoding,System.Func{System.AppDomain})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.IsolatedTemplateService"/>.
            </summary>
            <param name="language">The code language.</param>
            <param name="encoding">The encoding.</param>
            <param name="appDomainFactory">The delegate used to create an application domain.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.#ctor(RazorEngine.Encoding,System.Func{System.AppDomain})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.IsolatedTemplateService"/>.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="appDomainFactory">The delegate used to create an application domain.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.AddNamespace(System.String)">
            <summary>
            Adds a namespace that will be imported into the template.
            </summary>
            <param name="ns">The namespace to be imported.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.Compile(System.String,System.Type,System.String)">
            <summary>
            Compiles the specified template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="modelType">The model type.</param>
            <param name="cacheName">The name of the template type in the cache.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.CreateAppDomain(RazorEngine.Templating.IAppDomainFactory)">
            <summary>
            Creates an application domain.
            </summary>
            <param name="factory">The application domain factory.</param>
            <returns>An instance of <see cref="T:System.AppDomain"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.CreateTemplate(System.String,System.Type,System.Object)">
            <summary>
            Creates an instance of <see cref="T:RazorEngine.Templating.ITemplate`1"/> from the specified string template.
            </summary>
            <param name="razorTemplate">
            The string template.
            If templateType is not NULL, this parameter may be NULL (unused).
            </param>
            <param name="templateType">
            The template type or NULL if the template type should be dynamically created.
            If razorTemplate is not NULL, this parameter may be NULL (unused).
            </param>
            <param name="model">The model instance or NULL if no model exists.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate`1"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.CreateTemplates(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Creates a set of templates from the specified string templates and models.
            </summary>
            <param name="razorTemplates">
            The set of templates to create or NULL if all template types are already created (see templateTypes).
            If this parameter is NULL, the the templateTypes parameter may not be NULL. 
            Individual elements in this set may be NULL if the corresponding templateTypes[i] is not NULL (precompiled template).
            </param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="templateTypes">
            The set of template types or NULL to dynamically create template types for each template.
            If this parameter is NULL, the the razorTemplates parameter may not be NULL. 
            Individual elements in this set may be NULL to dynamically create the template if the corresponding razorTemplates[i] is not NULL (dynamically compile template).
            </param>
            <param name="parallel">Flag to determine whether to create templates in parallel.</param>
            <returns>The enumerable set of template instances.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.CreateTemplateType(System.String,System.Type)">
            <summary>
            Creates a <see cref="T:System.Type"/> that can be used to instantiate an instance of a template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="modelType">The model type or NULL if no model exists.</param>
            <returns>An instance of <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.CreateTemplateTypes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Creates a set of template types from the specfied string templates.
            </summary>
            <param name="razorTemplates">The set of templates to create <see cref="T:System.Type"/> instances for.</param>
            <param name="modelTypes">
            The set of model types or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="parallel">Flag to determine whether to create template types in parallel.</param>
            <returns>The set of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.Dispose(System.Boolean)">
            <summary>
            Releases resources used by this instance.
            </summary>
            <remarks>
            This method ensures the AppDomain is unloaded and any template assemblies are unloaded with it.
            </remarks>
            <param name="disposing">Flag to determine whether the instance is being disposed explicitly.</param>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.Dispose">
            <summary>
            Releases resources used by this instance.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.GetTemplate(System.String,System.Object,System.String)">
            <summary>
            Gets an instance of the template using the cached compiled type, or compiles the template type
            if it does not exist in the cache.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model or NULL if there is no model for this template.</param>
            <param name="cacheName">The name of the template type in the cache.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.GetTemplates(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets the set of template instances for the specified string templates. Cached templates will be considered
            and if they do not exist, new types will be created and instantiated.
            </summary>
            <param name="razorTemplates">The set of templates to create.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="cacheNames">The set of cache names.</param>
            <param name="parallel">Flag to determine whether to get the templates in parallel.</param>
            <returns>The set of <see cref="T:RazorEngine.Templating.ITemplate"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.HasTemplate(System.String)">
            <summary>
            Returns whether or not a template by the specified name has been created already.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <returns>Whether or not the template has been created.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.RemoveTemplate(System.String)">
            <summary>
            Remove a template by the specified name from the cache.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <returns>Whether or not the template has been removed.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.Parse(System.String,System.Object,RazorEngine.Templating.DynamicViewBag,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance or NULL if no model exists.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.Parse``1(System.String,System.Object,RazorEngine.Templating.DynamicViewBag,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance or NULL if no model exists.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.ParseMany(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RazorEngine.Templating.DynamicViewBag},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="viewBags">
            The set of initial ViewBag contents or NULL for an initially empty ViewBag for all templates.
            Individual elements in this set may be NULL if an initially empty ViewBag is desired for a specific template.
            </param>
            <param name="cacheNames">
            The set of cache names or NULL if no caching is desired for all templates.
            Individual elements in this set may be NULL if caching is not desired for specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in templates.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.Resolve(System.String,System.Object)">
            <summary>
            Resolves the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model or NULL if there is no model for the template.</param>
            <returns>The resolved template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.Run(System.String,System.Object,RazorEngine.Templating.DynamicViewBag)">
            <summary>
            Runs the template with the specified cacheName.
            </summary>
            <param name="cacheName">The name of the template in cache.  The template must be in cache.</param>
            <param name="model">The model for the template or NULL if there is no model.</param>
            <param name="viewBag">The initial ViewBag contents NULL for an empty ViewBag.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.IsolatedTemplateService.Run(RazorEngine.Templating.ITemplate,RazorEngine.Templating.DynamicViewBag)">
            <summary>
            Runs the template with the specified name.
            </summary>
            <param name="template">The template to run.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="P:RazorEngine.Templating.IsolatedTemplateService.RazorEngine#Templating#ITemplateService#EncodedStringFactory">
            <summary>
            Gets the encoded string factory.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.RequireNamespacesAttribute">
            <summary>
            Allows base templates to define require template imports when
            generating templates.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.RequireNamespacesAttribute.#ctor(System.String[])">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.RequireNamespacesAttribute"/>.
            </summary>
            <param name="namespaces">The set of required namespace imports.</param>
        </member>
        <member name="P:RazorEngine.Templating.RequireNamespacesAttribute.Namespaces">
            <summary>
            Gets the set of required namespace imports.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.TemplateCompilationException">
            <summary>
            Defines an exception that occurs during compilation of the template.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateCompilationException.#ctor(System.CodeDom.Compiler.CompilerErrorCollection,System.String,System.String)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateCompilationException"/>.
            </summary>
            <param name="errors">The set of compiler errors.</param>
            <param name="sourceCode">The source code that wasn't compiled.</param>
            <param name="template">The source template that wasn't compiled.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateCompilationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateCompilationException"/> from serialised data.
            </summary>
            <param name="info">The serialisation info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateCompilationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data for serialisation.
            </summary>
            <param name="info">The serialisation info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:RazorEngine.Templating.TemplateCompilationException.Errors">
            <summary>
            Gets the set of compiler errors.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.TemplateCompilationException.SourceCode">
            <summary>
            Gets the source code that wasn't compiled.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.TemplateCompilationException.Template">
            <summary>
            Gets the source template that wasn't compiled.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.TemplateServiceFactory">
            <summary>
            Provides factory methods for creating <see cref="T:RazorEngine.Templating.ITemplateService"/> instances.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateServiceFactory.#cctor">
            <summary>
            Initialises the <see cref="T:RazorEngine.Templating.TemplateServiceFactory"/> type.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateServiceFactory.CreateTemplateService(RazorEngine.Language,RazorEngine.Encoding)">
            <summary>
            Creates an instance of a template service.
            </summary>
            <param name="language">The language to use in this service.</param>
            <param name="encoding">The type of encoding to use in this service.</param>
            <returns></returns>
        </member>
        <member name="T:RazorEngine.Templating.TypeLoader">
            <summary>
            Defines a type loader.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TypeLoader.#ctor(System.AppDomain,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TypeLoader"/>
            </summary>
            <param name="appDomain">The application domain.</param>
            <param name="assemblies">The set of assemblies.</param>
        </member>
        <member name="M:RazorEngine.Templating.TypeLoader.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the specified type.
            </summary>
            <param name="type">The type to create.</param>
            <returns>An instance of the type.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TypeLoader.Dispose(System.Boolean)">
            <summary>
            Releases resources used by this instance.
            </summary>
            <param name="disposing">Flag to determine whether this instance is being disposed of explicitly.</param>
        </member>
        <member name="M:RazorEngine.Templating.TypeLoader.Dispose">
            <summary>
            Releases resources used by this reference.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TypeLoader.GetConstructor(System.Type)">
            <summary>
            Gets the delegate used to create an instance of the template type. 
            This method will consider the cached constructor delegate before creating an instance of one.
            </summary>
            <param name="type">The template type.</param>
            <returns>The delegate instance.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TypeLoader.GetConstructorInternal(System.Type)">
            <summary>
            Gets the delegate used to create an instance of the template type.
            </summary>
            <param name="type">The template type.</param>
            <returns>The delegate instance.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TypeLoader.ResolveAssembly(System.String)">
            <summary>
            Resolves the assembly with the specified name.
            </summary>
            <param name="name">The name of the assembly.</param>
            <returns>The assembly instance, or null.</returns>
        </member>
        <member name="T:RazorEngine.Templating.TemplateParsingException">
            <summary>
            Defines an exception that occurs during template parsing.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateParsingException.#ctor(System.Web.Razor.Parser.SyntaxTree.RazorError)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateParsingException"/>.
            </summary>
            <param name="error">The <see cref="T:System.Web.Razor.Parser.SyntaxTree.RazorError"/> generated by the parser.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateParsingException"/> from serialised data.
            </summary>
            <param name="info">The serialisation info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateParsingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data for serialisation.
            </summary>
            <param name="info">The serialisation info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:RazorEngine.Templating.TemplateParsingException.Column">
            <summary>
            Gets the column the parsing error occured.
            </summary>
        </member>
        <member name="P:RazorEngine.Templating.TemplateParsingException.Line">
            <summary>
            Gets the line the parsing error occured.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.TemplateService">
            <summary>
            Defines a template service.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.#ctor(RazorEngine.Configuration.ITemplateServiceConfiguration)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateService"/>
            </summary>
            <param name="config">The template service configuration.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateService"/>.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.#ctor(RazorEngine.Language,RazorEngine.Encoding)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateService"/>
            </summary>
            <param name="language">The code language.</param>
            <param name="encoding">the encoding.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.AddNamespace(System.String)">
            <summary>
            Adds a namespace that will be imported into the template.
            </summary>
            <param name="ns">The namespace to be imported.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.Compile(System.String,System.Type,System.String)">
            <summary>
            Compiles the specified template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="modelType">The model type.</param>
            <param name="cacheName">The name of the template type in the cache.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.CreateInstanceContext(System.Type)">
            <summary>
            Creates a new <see cref="T:RazorEngine.Templating.InstanceContext"/> for creating template instances.
            </summary>
            <param name="templateType">The template type.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.InstanceContext"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.CreateTemplate(System.String,System.Type,System.Object)">
            <summary>
            Creates an instance of <see cref="T:RazorEngine.Templating.ITemplate"/> from the specified string template.
            </summary>
            <param name="razorTemplate">
            The string template.
            If templateType is not NULL, this parameter may be NULL (unused).
            </param>
            <param name="templateType">
            The template type or NULL if the template type should be dynamically created.
            If razorTemplate is not NULL, this parameter may be NULL (unused).
            </param>
            <param name="model">The model instance or NULL if no model exists.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.CreateTemplates(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Creates a set of templates from the specified string templates and models.
            </summary>
            <param name="razorTemplates">
            The set of templates to create or NULL if all template types are already created (see templateTypes).
            If this parameter is NULL, the the templateTypes parameter may not be NULL. 
            Individual elements in this set may be NULL if the corresponding templateTypes[i] is not NULL (precompiled template).
            </param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="templateTypes">
            The set of template types or NULL to dynamically create template types for each template.
            If this parameter is NULL, the the razorTemplates parameter may not be NULL. 
            Individual elements in this set may be NULL to dynamically create the template if the corresponding razorTemplates[i] is not NULL (dynamically compile template).
            </param>
            <param name="parallel">Flag to determine whether to create templates in parallel.</param>
            <returns>The enumerable set of template instances.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.CreateTemplateType(System.String,System.Type)">
            <summary>
            Creates a <see cref="T:System.Type"/> that can be used to instantiate an instance of a template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="modelType">The model type or NULL if no model exists.</param>
            <returns>An instance of <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.CreateTemplateTypes(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Creates a set of template types from the specfied string templates.
            </summary>
            <param name="razorTemplates">The set of templates to create <see cref="T:System.Type"/> instances for.</param>
            <param name="modelTypes">
            The set of model types or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="parallel">Flag to determine whether to create template types in parallel.</param>
            <returns>The set of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.Dispose">
            <summary>
            Releases managed resources used by this instance.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.Dispose(System.Boolean)">
            <summary>
            Releases managed resources used by this instance.
            </summary>
            <param name="disposing">Are we explicitly disposing of this instance?</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.GetEncodedStringFactory(RazorEngine.Encoding)">
            <summary>
            Gets an instance of a <see cref="T:RazorEngine.Text.IEncodedStringFactory"/> for a known encoding.
            </summary>
            <param name="encoding">The encoding to get a factory for.</param>
            <returns>An instance of <see cref="T:RazorEngine.Text.IEncodedStringFactory"/></returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.GetParallelQueryPlan``1">
            <summary>
            Gets a parellel query plan used to configure a parallel query.
            </summary>
            <typeparam name="T">The query item type.</typeparam>
            <returns>An instance of <see cref="T:RazorEngine.Templating.Parallel.IParallelQueryPlan`1"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.GetTemplate(System.String,System.Object,System.String)">
            <summary>
            Gets an instance of the template using the cached compiled type, or compiles the template type
            if it does not exist in the cache.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance or NULL if there is no model for this template.</param>
            <param name="cacheName">The name of the template type in the cache.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate`1"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.GetTemplate``1(System.String,System.Object,System.String)">
            <summary>
            Gets an instance of the template using the cached compiled type, or compiles the template type
            if it does not exist in the cache.
            </summary>
            <typeparam name="T">Type of the model</typeparam>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance or NULL if there is no model for this template.</param>
            <param name="cacheName">The name of the template type in the cache.</param>
            <returns>An instance of <see cref="T:RazorEngine.Templating.ITemplate`1"/>.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.GetTemplates(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets the set of template instances for the specified string templates. Cached templates will be considered
            and if they do not exist, new types will be created and instantiated.
            </summary>
            <param name="razorTemplates">The set of templates to create.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="cacheNames">The set of cache names.</param>
            <param name="parallel">Flag to determine whether to get the templates in parallel.</param>
            <returns>The set of <see cref="T:RazorEngine.Templating.ITemplate"/> instances.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.Parse(System.String,System.Object,RazorEngine.Templating.DynamicViewBag,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance or NULL if no model exists.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.Parse``1(System.String,System.Object,RazorEngine.Templating.DynamicViewBag,System.String)">
            <summary>
            Parses and returns the result of the specified string template.
            </summary>
            <param name="razorTemplate">The string template.</param>
            <param name="model">The model instance or NULL if no model exists.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <param name="cacheName">The name of the template type in the cache or NULL if no caching is desired.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.ParseMany(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RazorEngine.Templating.DynamicViewBag},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Parses the specified set of templates.
            </summary>
            <param name="razorTemplates">The set of string templates to parse.</param>
            <param name="models">
            The set of models or NULL if no models exist for all templates.
            Individual elements in this set may be NULL if no model exists for a specific template.
            </param>
            <param name="viewBags">
            The set of initial ViewBag contents or NULL for an initially empty ViewBag for all templates.
            Individual elements in this set may be NULL if an initially empty ViewBag is desired for a specific template.
            </param>
            <param name="cacheNames">
            The set of cache names or NULL if no caching is desired for all templates.
            Individual elements in this set may be NULL if caching is not desired for specific template.
            </param>
            <param name="parallel">Flag to determine whether parsing in parallel.</param>
            <returns>The set of parsed template results.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.HasTemplate(System.String)">
            <summary>
            Returns whether or not a template by the specified name has been created already.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <returns>Whether or not the template has been created.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.RemoveTemplate(System.String)">
            <summary>
            Remove a template by the specified name from the cache.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <returns>Whether or not the template has been removed.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.Resolve(System.String,System.Object)">
            <summary>
            Resolves the template with the specified name.
            </summary>
            <param name="cacheName">The name of the template type in cache.</param>
            <param name="model">The model or NULL if there is no model for the template.</param>
            <returns>The resolved template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.Run(System.String,System.Object,RazorEngine.Templating.DynamicViewBag)">
            <summary>
            Runs the template with the specified cacheName.
            </summary>
            <param name="cacheName">The name of the template in cache.  The template must be in cache.</param>
            <param name="model">The model for the template or NULL if there is no model.</param>
            <param name="viewBag">The initial ViewBag contents NULL for an empty ViewBag.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.Run(RazorEngine.Templating.ITemplate,RazorEngine.Templating.DynamicViewBag)">
            <summary>
            Runs the specified template and returns the result.
            </summary>
            <param name="template">The template to run.</param>
            <param name="viewBag">The ViewBag contents or NULL for an initially empty ViewBag.</param>
            <returns>The string result of the template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.SetModel``1(RazorEngine.Templating.ITemplate,``0)">
            <summary>
            Sets the model for the template.
            </summary>
            <typeparam name="T">The model type.</typeparam>
            <param name="template">The template instance.</param>
            <param name="model">The model instance.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateService.SetModelExplicit(RazorEngine.Templating.ITemplate,System.Object)">
            <summary>
            Sets the model for the template.
            </summary>
            <remarks>
            This method uses reflection to set the model property. As we can't guaruntee that we know
            what model type they will be using, we have to do the hard graft. The preference would be
            to use the generic <see cref="M:RazorEngine.Templating.TemplateService.SetModel``1(RazorEngine.Templating.ITemplate,``0)"/> method instead.
            </remarks>
            <param name="template">The template instance.</param>
            <param name="model">The model instance.</param>
        </member>
        <member name="P:RazorEngine.Templating.TemplateService.EncodedStringFactory">
            <summary>
            Gets the encoded string factory.
            </summary>
        </member>
        <member name="T:RazorEngine.Templating.TemplateWriter">
            <summary>
            Defines a template writer used for helper templates.
            </summary>
        </member>
        <member name="M:RazorEngine.Templating.TemplateWriter.#ctor(System.Action{System.IO.TextWriter})">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Templating.TemplateWriter"/>.
            </summary>
            <param name="writer">The writer delegate used to write using the specified <see cref="T:System.IO.TextWriter"/>.</param>
        </member>
        <member name="M:RazorEngine.Templating.TemplateWriter.ToString">
            <summary>
            Executes the write delegate and returns the result of this <see cref="T:RazorEngine.Templating.TemplateWriter"/>.
            </summary>
            <returns>The string result of the helper template.</returns>
        </member>
        <member name="M:RazorEngine.Templating.TemplateWriter.WriteTo(System.IO.TextWriter)">
            <summary>
            Writes the helper result of the specified text writer.
            </summary>
            <param name="writer">The text writer to write the helper result to.</param>
        </member>
        <member name="T:RazorEngine.Text.HtmlEncodedString">
            <summary>
            Represents a Html-encoded string.
            </summary>
        </member>
        <member name="T:RazorEngine.Text.IEncodedString">
            <summary>
            Defines the required contract for implementing an encoded string.
            </summary>
        </member>
        <member name="M:RazorEngine.Text.IEncodedString.ToEncodedString">
            <summary>
            Gets the encoded string.
            </summary>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:RazorEngine.Text.HtmlEncodedString.#ctor(System.String)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Text.HtmlEncodedString"/>
            </summary>
            <param name="value">The raw string to be encoded.</param>
        </member>
        <member name="M:RazorEngine.Text.HtmlEncodedString.ToEncodedString">
            <summary>
            Gets the encoded string.
            </summary>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:RazorEngine.Text.HtmlEncodedString.ToString">
            <summary>
            Gets the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="T:RazorEngine.Text.HtmlEncodedStringFactory">
            <summary>
            Represents a factory that creates <see cref="T:RazorEngine.Text.HtmlEncodedString"/> instances.
            </summary>
        </member>
        <member name="T:RazorEngine.Text.IEncodedStringFactory">
            <summary>
            Defines the required contract for implementing a factory for building encoded strings.
            </summary>
        </member>
        <member name="M:RazorEngine.Text.IEncodedStringFactory.CreateEncodedString(System.String)">
            <summary>
            Creates a <see cref="T:RazorEngine.Text.IEncodedString"/> instance for the specified raw string.
            </summary>
            <param name="value">The raw string.</param>
            <returns>An instance of <see cref="T:RazorEngine.Text.IEncodedString"/>.</returns>
        </member>
        <member name="M:RazorEngine.Text.IEncodedStringFactory.CreateEncodedString(System.Object)">
            <summary>
            Creates a <see cref="T:RazorEngine.Text.IEncodedString"/> instance for the specified object instance.
            </summary>
            <param name="value">The object instance.</param>
            <returns>An instance of <see cref="T:RazorEngine.Text.IEncodedString"/>.</returns>
        </member>
        <member name="M:RazorEngine.Text.HtmlEncodedStringFactory.CreateEncodedString(System.String)">
            <summary>
            Creates a <see cref="T:RazorEngine.Text.IEncodedString"/> instance for the specified raw string.
            </summary>
            <param name="rawString">The raw string.</param>
            <returns>An instance of <see cref="T:RazorEngine.Text.IEncodedString"/>.</returns>
        </member>
        <member name="M:RazorEngine.Text.HtmlEncodedStringFactory.CreateEncodedString(System.Object)">
            <summary>
            Creates a <see cref="T:RazorEngine.Text.IEncodedString"/> instance for the specified object instance.
            </summary>
            <param name="value">The object instance.</param>
            <returns>An instance of <see cref="T:RazorEngine.Text.IEncodedString"/>.</returns>
        </member>
        <member name="T:RazorEngine.Text.RawString">
            <summary>
            Represents an unencoded string.
            </summary>
        </member>
        <member name="M:RazorEngine.Text.RawString.#ctor(System.String)">
            <summary>
            Initialises a new instance of <see cref="T:RazorEngine.Text.RawString"/>
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:RazorEngine.Text.RawString.ToEncodedString">
            <summary>
            Gets the encoded string.
            </summary>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:RazorEngine.Text.RawString.ToString">
            <summary>
            Gets the string representation of this instance.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="T:RazorEngine.Text.RawStringFactory">
            <summary>
            Represents a factory that creates <see cref="T:RazorEngine.Text.RawString"/> instances.
            </summary>
        </member>
        <member name="M:RazorEngine.Text.RawStringFactory.CreateEncodedString(System.String)">
            <summary>
            Creates a <see cref="T:RazorEngine.Text.IEncodedString"/> instance for the specified raw string.
            </summary>
            <param name="value">Thevalue.</param>
            <returns>An instance of <see cref="T:RazorEngine.Text.IEncodedString"/>.</returns>
        </member>
        <member name="M:RazorEngine.Text.RawStringFactory.CreateEncodedString(System.Object)">
            <summary>
            Creates a <see cref="T:RazorEngine.Text.IEncodedString"/> instance for the specified object instance.
            </summary>
            <param name="value">The value.</param>
            <returns>An instance of <see cref="T:RazorEngine.Text.IEncodedString"/>.</returns>
        </member>
    </members>
</doc>
